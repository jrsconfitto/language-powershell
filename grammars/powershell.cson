{
  fileTypes: [
    "ps1"
    "psm1"
    "psd1"
  ]
  name: "PowerShell"
  patterns: [
    {
      begin: "<#"
      beginCaptures:
        0:
          name: "punctuation.start.definition.comment.block.powershell"

      end: "#>"
      endCaptures:
        0:
          name: "punctuation.end.definition.comment.block.powershell"

      name: "comment.block.powershell"
      patterns: [include: "#commentEmbeddedDocs"]
    }
    {
      begin: "(?<![\\\\-])#"
      end: "$"
      name: "comment.line.number-sign.powershell"
      patterns: [include: "#commentEmbeddedDocs"]
    }
    {
      match: "[2-6]>&1|>>|>|<<|<|>|>\\||[1-6]>|[1-6]>>"
      name: "keyword.operator.redirection.powershell"
    }
    {
      include: "#commands"
    }
    {
      include: "#variable"
    }
    {
      include: "#interpolatedStringContent"
    }
    {
      include: "#function"
    }
    {
      include: "#attribute"
    }
    {
      include: "#type"
    }
    {
      begin: "(?<!(?<!`)\")\""
      end: "\"(?!\")"
      name: "string.quoted.double.powershell"
      patterns: [
        {
          include: "#variableNoProperty"
        }
        {
          include: "#doubleQuotedStringEscapes"
        }
        {
          include: "#interpolation"
        }
        {
          match: "`\\s*$"
          name: "keyword.other.powershell"
        }
      ]
    }
    {
      comment: "Needed to parse stuff correctly in 'argument mode'. (See about_parsing.)"
      include: "#doubleQuotedStringEscapes"
    }
    {
      begin: "(?<!')'"
      end: "'(?!')"
      name: "string.quoted.single.powershell"
      patterns: [
        match: "''"
        name: "constant.character.escape.powershell"
      ]
    }
    {
      begin: "\\@\"(?=$)"
      end: "^\"@"
      name: "string.quoted.double.heredoc.powershell"
      patterns: [
        {
          include: "#variableNoProperty"
        }
        {
          include: "#doubleQuotedStringEscapes"
        }
        {
          include: "#interpolation"
        }
      ]
    }
    {
      begin: "\\@'(?=$)"
      end: "^'@"
      name: "string.quoted.single.heredoc.powershell"
      patterns: [
        match: "''"
        name: "constant.character.escape.powershell"
      ]
    }
    {
      include: "#numericConstant"
    }
    {
      begin: "@\\("
      captures:
        0:
          name: "keyword.other.powershell"

      end: "\\)"
      name: "meta.group.array-expression.powershell"
      patterns: [include: "$self"]
    }
    {
      begin: "\\$\\("
      captures:
        0:
          name: "keyword.other.powershell"

      comment: "TODO: move to repo; make recursive."
      end: "\\)"
      name: "meta.group.complex.subexpression.powershell"
      patterns: [include: "$self"]
    }
    {
      match: "(?<!\\w)-([ci]?[lg][te]|eq|ne)"
      name: "keyword.operator.logical.powershell"
    }
    {
      match: "(?i:[a-z][a-z0-9]+-?[a-z][a-z0-9]+)(?i:\\.(?i:exe|cmd|bat|ps1))"
      name: "support.function.powershell"
    }
    {
      match: "(?<!\\w)((?i:begin|break|catch|continue|data|define|do|dynamicparam|else|elseif|end|exit|finally|for|foreach(?!-object)|from|if|in|inlinescript|parallel|param|process|return|switch|throw|trap|try|until|using|var|where(?!=-object)|while)|%|\\?)(?!\\w)"
      name: "keyword.control.powershell"
    }
    {
      captures:
        1:
          name: "storage.type.powershell"

        2:
          name: "entity.name.function"

      comment: "capture should be entity.name.type, but it doesn't provide a good color in the default schema."
      match: "(?<!\\w)((?i:class)|%|\\?)(?:\\s)+((?:\\p{L}|\\d|_|-|)+)\\b"
    }
    {
      match: "(?<!\\w)-(?i:is(?:not)?|as)\\b"
      name: "keyword.operator.comparison.powershell"
    }
    {
      match: "(?<!\\w)-(?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in)|replace))(?!\\p{L})"
      name: "keyword.operator.comparison.powershell"
    }
    {
      match: "(?<!\\w)-(?i:join|split)(?!\\p{L})|!"
      name: "keyword.operator.unary.powershell"
    }
    {
      match: "(?<!\\w)-(?i:and|or|not|xor)(?!\\p{L})|!"
      name: "keyword.operator.logical.powershell"
    }
    {
      match: "(?<!\\w)-(?i:band|bor|bnot|bxor)(?!\\p{L})"
      name: "keyword.operator.bitwise.powershell"
    }
    {
      match: "(?<!\\w)-(?i:f)(?!\\p{L})"
      name: "keyword.operator.string-format.powershell"
    }
    {
      match: "[+%*/-]?=|[+/*%-]"
      name: "keyword.operator.assignment.powershell"
    }
    {
      match: "\\|{2}|&{2}|;"
      name: "keyword.other.statement-separator.powershell"
    }
    {
      match: "&|(?<!\\w)\\.(?= )|`|,|\\|"
      name: "keyword.operator.other.powershell"
    }
    {
      comment: "This is very imprecise, is there a syntax for 'must come after...' "
      match: "(?<!\\s|^)\\.\\.(?=\\d|\\(|\\$)"
      name: "keyword.operator.range.powershell"
    }
  ]
  repository:
    attribute:
      begin: "\\[(\\p{L}|\\.|``\\d+)+(?=\\()"
      beginCaptures:
        0:
          name: "entity.name.tag"

        1:
          name: "entity.name.tag"

      end: "\\]"
      endCaptures:
        0:
          name: "entity.name.tag"

      patterns: [
        begin: "\\("
        end: "\\)"
        name: "entity.other.attribute-name"
        patterns: [
          {
            captures:
              0:
                name: "entity.other.attribute.parameter.powershell"

              1:
                name: "constant.language.powershell"

              2:
                name: "variable.other.powershell"

            comment: "really we should match the known attributes first"
            match: "(\\w+)\\s*=?([^\"']*?|'[^']*?'|\"[^\"]*?\")?(?=,|\\))"
            name: "entity.other.attribute-name.powershell"
          }
          {
            include: "#variable"
          }
        ]
      ]

    commands:
      patterns: [
        {
          comment: "Verb-Noun pattern:"
          match: "(?:(\\p{L}|\\d|_|-|\\\\|\\:)*\\\\)?\\b(?i:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)\\-.+?(?:\\.(?i:exe|cmd|bat|ps1))?\\b"
          name: "support.function.powershell"
        }
        {
          comment: "Builtin cmdlets with reserved verbs"
          match: "(?<!\\w)(?i:foreach-object)(?!\\w)"
          name: "support.function.powershell"
        }
      ]

    commentEmbeddedDocs:
      patterns: [
        {
          captures:
            1:
              name: "constant.string.documentation.powershell"

            2:
              name: "keyword.operator.documentation.powershell"

          match: "(?i:\\s*(\\.)(SYNOPSIS|DESCRIPTION|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|FUNCTIONALITY))"
          name: "comment.documentation.embedded.powershell"
        }
        {
          captures:
            1:
              name: "constant.string.documentation.powershell"

            2:
              name: "keyword.operator.documentation.powershell"

            3:
              name: "keyword.operator.documentation.powershell"

          match: "(?i:\\s*(\\.)(PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\\s+([a-z0-9-_]+))"
          name: "comment.documentation.embedded.powershell"
        }
        {
          captures:
            1:
              name: "constant.string.documentation.powershell"

            2:
              name: "keyword.operator.documentation.powershell"

            3:
              name: "string.quoted.double.heredoc.powershell"

          match: "(?i:requires\\s+-(Version\\s+\\d(.\\d+)?|Assembly\\s+(.*)|Module\\s+(.*)|PsSnapIn\\s+(.*)|ShellId\\s+(.*)))"
          name: "comment.documentation.embedded.powershell"
        }
      ]

    doubleQuotedStringEscapes:
      patterns: [
        {
          match: "`[0abnfrvt\"'$`]"
          name: "constant.character.escape.powershell"
        }
        {
          match: "\"\""
          name: "constant.character.escape.powershell"
        }
      ]

    function:
      begin: "((?i:function|filter|configuration|workflow))\\s+((?:\\p{L}|\\d|_|-|\\.)+)"
      beginCaptures:
        0:
          name: "meta.function"

        1:
          name: "storage.type"

        2:
          name: "entity.name.function"

      end: "\\{|\\("

    interpolatedStringContent:
      begin: "\\("
      beginCaptures:
        0:
          name: "keyword.other.powershell"

      contentName: "interpolated.simple.source.powershell"
      end: "\\)"
      endCaptures:
        0:
          name: "keyword.other.powershell"

      patterns: [
        {
          include: "$self"
        }
        {
          include: "#interpolation"
        }
        {
          include: "#interpolatedStringContent"
        }
      ]

    interpolation:
      begin: "(\\$)\\("
      beginCaptures:
        0:
          name: "keyword.other.powershell"

      contentName: "interpolated.complex.source.powershell"
      end: "\\)"
      endCaptures:
        0:
          name: "keyword.other.powershell"

      patterns: [
        {
          include: "$self"
        }
        {
          include: "#interpolation"
        }
        {
          include: "#interpolatedStringContent"
        }
      ]

    numericConstant:
      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.math.powershell"

            2:
              name: "support.constant.powershell"

            3:
              name: "keyword.other.powershell"

          match: "(?<!\\w)(?i:(0x)([a-f0-9]+)((?i:L)?(?i:[kmgtp]b)?))(?!\\w)"
          name: "constant.numeric.hexadecimal.powershell"
        }
        {
          captures:
            1:
              name: "support.constant.powershell"

            2:
              name: "keyword.operator.math.powershell"

            3:
              name: "support.constant.powershell"

            4:
              name: "keyword.other.powershell"

            5:
              name: "keyword.other.powershell"

          match: "(?<!\\w)(?i:(\\d*\\.?\\d+)(?:((?i:E)[+-]?)(\\d+))?((?i:[DL])?)((?i:[kmgtp]b)?))(?!\\w)"
          name: "constant.numeric.scientific.powershell"
        }
      ]

    scriptblock:
      begin: "\\{"
      end: "\\}"
      name: "meta.scriptblock.powershell"
      patterns: [include: "$self"]

    type:
      begin: "\\["
      beginCaptures:
        0:
          name: "entity.other.attribute-name"

      comment: "name should be entity.name.type but default schema doesn't have a good color for it"
      end: "\\]"
      endCaptures:
        0:
          name: "entity.other.attribute-name"

      patterns: [
        {
          match: "(\\p{L}|\\.|``\\d+)+?"
          name: "entity.other.attribute-name"
        }
        {
          include: "$self"
        }
      ]

    variable:
      patterns: [
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "constant.language.powershell"

          comment: "These are special constants."
          match: "(\\$)(?i:(False|Null|True))\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.constant.variable.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "These are the other built-in constants."
          match: "(\\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.constant.automatic.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "Automatic variables are not constants, but they are read-only. In monokai (default) color schema support.variable doesn't have color, so we use constant."
          match: "(\\$)(?i:(\\$|\\^|\\?|_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "variable.language.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "Style preference variables as language variables so that they stand out."
          match: "(\\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "storage.modifier.scope.powershell"

            3:
              name: "variable.other.normal.powershell"

            4:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$)(global|local|private|script|using|workflow):((?:\\p{L}|\\d|_)+))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "storage.modifier.scope.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "keyword.other.powershell"

            5:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$\\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\\}))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.variable.drive.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$)((?:\\p{L}|\\d|_)+:)?((?:\\p{L}|\\d|_)+))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.variable.drive.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "keyword.other.powershell"

            5:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$\\{)((?:\\p{L}|\\d|_)+:)?([^}]*[^}`])(\\}))((?:\\.(?:\\p{L}|\\d|_)+)*\\b)?"
        }
      ]

    variableNoProperty:
      patterns: [
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "constant.language.powershell"

          comment: "These are special constants."
          match: "(\\$)(?i:(False|Null|True))\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.constant.variable.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "These are the other built-in constants."
          match: "(\\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.variable.automatic.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "Automatic variables are not constants, but they are read-only..."
          match: "(\\$)(?i:(\\$|\\^|\\?|_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This))\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "variable.language.powershell"

            3:
              name: "entity.name.function.invocation.powershell"

          comment: "Style preference variables as language variables so that they stand out."
          match: "(\\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference))\\b"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "storage.modifier.scope.powershell"

            3:
              name: "variable.other.normal.powershell"

            4:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$)(global|local|private|script|using|workflow):((?:\\p{L}|\\d|_)+))"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "storage.modifier.scope.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "keyword.other.powershell"

            5:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$\\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\\}))"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.variable.drive.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$)((?:\\p{L}|\\d|_)+:)?((?:\\p{L}|\\d|_)+))"
        }
        {
          captures:
            1:
              name: "keyword.other.powershell"

            2:
              name: "support.variable.drive.powershell"

            3:
              name: "variable.other.readwrite.powershell"

            4:
              name: "keyword.other.powershell"

            5:
              name: "entity.name.function.invocation.powershell"

          match: "(?i:(\\$\\{)((?:\\p{L}|\\d|_)+:)?([^}]*[^}`])(\\}))"
        }
      ]

  scopeName: "source.powershell"
}